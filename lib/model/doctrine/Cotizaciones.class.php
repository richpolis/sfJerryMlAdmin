<?php

/**
 * Cotizaciones
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    sfJerryMlAdmin
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Cotizaciones extends BaseCotizaciones
{
    public function __toString() {
        return sprintf("ID: %s .- %s",$this->getId(),$this->getDescripcion());
    }
    public function getStringStatus(){
        switch($this->getStatus()){
            case 3: 
                return "Pagos Liberados";
            case 2:
                return "Aprobada - Liberar Pagos a Talentos";
            case 1:
                return "Enviada a cliente";
            case 0:
                return "En captura";
            case -1:
                return "Cancelado";
            case -2:
                return "Se Cayo Cotizacion";    
        }
    }
    
    public function getTipoCotizacionString(){
        $tipos=  Doctrine_Core::getTable('Cotizaciones')->getTiposCotizacion();
        return $tipos[$this->getTipoCotizacion()];
    }
    
    public function statusIncompleto(){
        if($this->getStatus()>=CotizacionesTable::$INCOMPLETO)
            return true;
        else
            return false;
    }
    
    public function statusAprobada(){
        if($this->getStatus()>=CotizacionesTable::$APROBADA)
            return true;
        else
            return false;
    }
    public function statusEnMediacion(){
        if($this->getStatus()<=CotizacionesTable::$MEDIACION)
            return true;
        else
            return false;
    }
        
    public function statusPagosLiberados(){
        if($this->getStatus()>=CotizacionesTable::$PAGOS_LIBERADOS)
            return true;
        else
            return false;
    }
    
    public function getRenderMensaje(){
        $contacto = $this->getContactos();
        $user= sfContext::getInstance()->getUser()->getGuardUser();
        $usuario=$user->getFirstName()." ".$user->getLastName();
        $email=$user->getEmailAddress();
        $firma=$user->getFirma();
        $direccion= sfContext::getInstance()->getRequest()->getHost();
        $detalles_cotizacion=$this->getDetallesCotizacion();
        $cadena="";
        foreach($detalles_cotizacion as $detalle){
            $cadena.=$detalle->getTalentos();
            foreach($detalle->getEventos() as $evento){
                if($evento->getNivel()==CotizacionesTable::$NIVEL_DETALLE){
                    $cadena.="<br/>";
                    $cadena.=$evento;
                }
            }
            $cadena.="<br/><br/>";
        }

        if(strlen($firma)==0){
           $sFirma="$usuario Ejecutivo de Cuenta.<br/>Email: $email.<br/>Teléfonos JerryML a especificar.<br/>";
        }else{
           $sFirma="<img src='http://$direccion/uploads/usuarios/$firma'/>"; 
        }
        
$body = <<<EOD
        <p>
        Estimado {$contacto}<br/>
        
        Por medio de la presente le envio la cotización para:<br/><br/>
        
        {$cadena}

        <br/>
        Cotización adjunta.
        <br/>
        <br/>
        Atentamente:
        <br/>
        $sFirma
        </p>
EOD;

    return $body;
    
    }
    
    public function getRenderMensaje2(){
        $contacto = $this->getContactos();
        $user= sfContext::getInstance()->getUser()->getGuardUser();
        $usuario=$user->getFirstName()." ".$user->getLastName();
        $email=$user->getEmailAddress();
        $firma=$user->getFirma();
        $direccion= sfContext::getInstance()->getRequest()->getHost();
        
        if(strlen($firma)==0){
           $sFirma="<span style='text-transform:capitalize;'>$usuario</span> Ejecutivo de Cuenta.<br/>Email: $email.<br/>Teléfonos JerryML a especificar.<br/>";
        }else{
           $sFirma="<img src='http://$direccion/uploads/usuarios/$firma'/>"; 
        }
        
$body = <<<EOD
        <p>
        Estimado {$contacto}<br/>

        <br/>
        <br/>
        <br/>
        <br/>
        <br/>
        <br/>
        <br/>
        <br/>
        <br/>
        <br/>
        Atentamente:
        <br/>
        $sFirma
        </p>
EOD;

    return $body;
    
    }
    
    public function getCadenaTalentos(){
        $detalles=$this->getDetallesCotizacion();
        $talentos=array();
        $cadena="";
        foreach($detalles as $detalle){
            $talentos[]=$detalle->getTalentos()->getName();
        }
        $largo=count($talentos);
        foreach($talentos as $key=>$name){
            $cadena.=$name;
            if($key+1<$largo){
                $cadena.=", ";
            }
        }
        return $cadena;
    }
    public function getTotal(){
        return $this->getSubtotal()+$this->getIva();
    }
    
    public function getTotalSinIva(){
        return $this->getSubtotal();
    }
    public function aprobarCotizacion(){
        //aprobar cotizacion, crea un registro en el cliente para el pago
        //y una entrada en contratos para el contrato que se sube despues. 
        if($this->getSubtotal()>0 && $this->validarAprobar()){
            $clientes=$this->getClientes();
            $clientes->setSaldo($clientes->getSaldo()+$this->getSubtotal());
            $clientes->save();

            $contrato=Doctrine_Core::getTable('Contratos')->findOneBy('cotizacion_id', $this->getId());
            if(!$contrato){
                $contrato=new Contratos();
                $contrato->setCotizacionId($this->getId());
                //$contrato->setUserId($this->getUser()->getGuardUser()->getId());
                $contrato->save();
            }
            
            $factura=Doctrine_Core::getTable('Facturas')->findOneBy('cotizacion_id', $this->getId());
            if(!$factura){
                $factura=new Facturas();
                $factura->setCotizacionId($this->getId());
                //$factura->setUserId($this->getUser()->getGuardUser()->getId());
                $factura->save();
            }
            
            
            $pago_cliente=Doctrine_Core::getTable('Pagos')->getLoteDePagoForClienteId($clientes->getId());
            if(!$pago_cliente){
                $pago_cliente=new Pagos();
                $pago_cliente->setClienteId($clientes->getId());
                $pago_cliente->save();
            }
            $existePagoCotizacion=false;
            foreach($pago_cliente->getDetallesPagos() as $detalle){
                if($detalle->getCotizacionId()==$this->getId()){
                    //significa que existe registro para pagar de esta cotizacion
                    $existePagoCotizacion=true;
                }
            }
            if(!$existePagoCotizacion){
                $user=  sfContext::getInstance()->getUser()->getGuardUser();
                $detallePago=new DetallesPagos();
                $detallePago->setPagosId($pago_cliente->getId());
                //$detallePago->setUserId($this->getUser()->getGuardUser()->getId());
                $detallePago->setCotizacionId($this->getId());
                $detallePago->setFechaPago(date('Y-m-d'));
                $detallePago->setImporte($this->getSubtotal()/2);
                $detallePago->setTipoPago(1);
                $detallePago->save();
                
                /*$pago_cliente=Doctrine_Core::getTable('Pagos')->getLoteDePagoForClienteId($clientes->getId());*/
                $pago_cliente->setAdeudo($pago_cliente->getAdeudo()+$this->getSubtotal());
                $pago_cliente->save();
            }
            $this->aprobarEventos();
            
            return true;
        }else{
            return false;
        }
    }
    public function cancelarCotizacion(){
        //cancela la cotizacion y libera la deuda del cliente.
        if($this->validarCancelarAprobacion()){
            $pago=null;
            foreach($this->getDetallesPagos() as $dp){
                $pago=$dp->getPagos();
                $dp->delete();
            }
            if(!$pago==null)
                $pago->calcular();
            $clientes=$this->getClientes();
            $clientes->setSaldo($clientes->getSaldo()-$this->getSubtotal());
            $clientes->save();
        }
    }
    public function liberarPagosCotizacion(){
        $precio=0;
        $margen_jerryml=0;
        foreach($this->getDetallesCotizacion() as $dc){
                $talento=$dc->getTalentos();
                $pagoTalento=Doctrine_Core::getTable('PagosTalentos')->getLoteDePagoForTalentoId($talento->getId());
                if(!$pagoTalento){
                    $pagoTalento=new PagosTalentos();
                    $pagoTalento->setTalentoId($talento->getId());
                    $pagoTalento->save();
                }
                $existeDetalleCotizacion=false;
                foreach($pagoTalento->getDetallesPagosTalentos() as $dpt){
                    if($dpt->getDetallesCotizacionId()==$dc->getId()){
                        $existeDetalleCotizacion=true;
                    }
                }
                if(!$existeDetalleCotizacion){
                    $detallePagoTalento=new DetallesPagosTalentos();
                    $detallePagoTalento->setPagosTalentosId($pagoTalento->getId());
                    //$detallePagoTalento->setUserId($this->getUser()->getGuardUser()->getId());
                    $detallePagoTalento->setDetallesCotizacionId($dc->getId());
                    $detallePagoTalento->setImporte($dc->getGananciaTalentoReal());
                    //$detallePagoTalento->setIva($dc->getGananciaTalento()*.16);
                    $detallePagoTalento->save();
                    
                    $talento->setSaldo($dc->getGananciaTalentoReal());
                    $talento->save();
                    
                    
                    /*$pagoTalento=Doctrine_Core::getTable('PagosTalentos')->getLoteDePagoForTalentoId($talento->getId());*/
                    $pagoTalento->setAdeudo($pagoTalento->getAdeudo()+$dc->getGananciaTalentoReal());
                    $pagoTalento->save();
                }
                
        }
        
        $this->congelarEventos();
    }
    
    public function calcular(){
        $detalles_cotizacion=$this->getDetallesCotizacion();
        $subtotal=0;
        $iva=0;
        foreach ($detalles_cotizacion as $detalle){
            $subtotal+=$detalle->getSubtotal();
            $iva+=$detalle->getIva();
        }
        $this->setSubtotal($subtotal);
        $this->setIva($iva);
        $this->save();
    }
    
    public function calcularPagos(){
        $detalles_pagos=$this->getDetallesPagos();
        $importe=0.0;
        $importeAprobado=0.0;
        $importeSinAprobar=0.0;
        $pago_cliente_id=0;
        foreach ($detalles_pagos as $detalle){
            if($detalle->getStatus()==PagosTable::$PAGOS_CALCULADOS){
                $importe+=$detalle->getImporte();
            }elseif($detalle->getStatus()==PagosTable::$APROBADO){
                $importeAprobado+=$detalle->getImporte();
            }else{ //PagosTable::$INCOMPLETO
                $importeSinAprobar+=$detalle->getImporte();
            }
            $pago_cliente_id=$detalle->getPagosId();
        }
        if($importe==$this->getSubtotal()){
            $this->setIsPay(true);
            $this->save();
        }elseif(($importeAprobado+$importeSinAprobar)==0){
            $detallePago=new DetallesPagos();
            $detallePago->setPagosId($pago_cliente_id);
            //$detallePago->setUserId($this->getUser()->getGuardUser()->getId());
            $detallePago->setCotizacionId($this->getId());
            $detallePago->setFechaPago(date('Y-m-d'));
            $detallePago->setImporte($this->getSubtotal()-$importe);
            $detallePago->setTipoPago(2);
            $detallePago->save();
        }
    }
    
    public function validarAprobar(){
        $detalles_cotizacion=$this->getDetallesCotizacion();
        $valido=true;
        foreach ($detalles_cotizacion as $detalle){
            if($detalle->getSubtotal()>0){
                $cont=0;
                foreach($detalle->getEventos() as $evento){
                    $cont++;
                }
                $valido=($cont>0?true:false);
            }else{
                $valido=false;
            }
            if(!$valido) break;
        }
       return $valido;
    }
    
    public function validarCancelarAprobacion(){
        $importe=0;
        foreach($this->getDetallesPagos() as $dp){
            if($dp->getStatus()==PagosTable::$PAGOS_CALCULADOS){
                $importe+= $dp->getImporte();
            }
        }
        return ($importe>0?false:true);
    }
    
    public function getErroresAprobar(){
        $detalles_cotizacion=$this->getDetallesCotizacion();
        $mensaje="";
        foreach ($detalles_cotizacion as $detalle){
            if($detalle->getSubtotal()<=0){
                if(strlen($mensaje)>0) $mensaje.=", ";
                $mensaje.="El talento: ".$detalle->getTalentos()." sin importe";
            }else{
                $cont=0;
                foreach($detalle->getEventos() as $evento){
                    $cont++;
                }
                if($cont==0){
                    if(strlen($mensaje)>0) $mensaje.=", ";
                    $mensaje.="El talento: ".$detalle->getTalentos()." sin eventos";
                }
            }
        }
        return $mensaje;
    }
    
    public function aprobarEventos(){
        foreach($this->getDetallesCotizacion() as $dc){
            foreach($dc->getEventos() as $evento){
                $evento->mediacionEvento();
            }
        }    
    }
    public function congelarEventos(){
        foreach($this->getDetallesCotizacion() as $dc){
            foreach($dc->getEventos() as $evento){
                $evento->apartarEvento();
            }
        }
    }
    public function delete(\Doctrine_Connection $conn = null) {
        if(!$this->statusAprobada() && $this->validarCancelarAprobacion()){
            $conn = Doctrine_Manager::getInstance()->getCurrentConnection();
            $conn->beginTransaction();
            
            foreach($this->getDetallesCotizacion() as $dc){
                $dc->delete();
            }
            
            foreach($this->getDetallesPagos() as $dp){
                $dp->delete();
            }
            
            foreach($this->getCotizacionesComisionistas() as $cotco){
                $cotco->deleteOnly();
            }
            
            foreach($this->getCotizacionesConceptos() as $cotc){
                $cotc->deleteOnly();
            }
            
            parent::delete($conn);
            $conn->commit();
            return true;
        }else{
            sfContext::getInstance()->getUser()->setFlash("error", "No es posible de eliminar");
        }
    }
    
    public function save(\Doctrine_Connection $conn = null) {
        if(!$this->getEmpresaId()){
            $empresas=  Doctrine_Core::getTable('Empresas')->getEmpresas();
            $this->setEmpresaId($empresas[0]->getId());
        }
        
       //$this->setRequerimientos($this->getRequerimientosDeConceptos());
        
        /*if($this->getActividad()){
            $this->setActividad(strip_tags($this->getActividad()));
        }*/
        
        parent::save($conn);
        
        if($this->getManagerId()){
            $this->getManager()->addEventoDesdeCotizacion($this);
        }
        
    }
    
     
    public function getRequerimientosDeConceptos(){
        $sConceptos="";
        $conceptos=array();
        foreach($this->getCotizacionesConceptos() as $cotc){
            $conceptos[]=$cotc->getConceptos()->getRequerimiento();
        }
        if(count($conceptos)>0){
            $sConceptos="<ul>";
            foreach($conceptos as $concepto){
                $sConceptos.="<li>".$concepto."</li>";
            }
            $sConceptos.="</ul>";
        }
        return $sConceptos;
        
    }
    
    public function actualizarEventos(){
        $dateInicial=new DateTime($this->getFechaDesde());
        $dateFinal= new DateTime($this->getFechaHasta());
        foreach($this->getDetallesCotizacion() as $dc){
            $dc->actualizarEventosDesdeCotizacion($dateInicial,$dateFinal,$this,$dc);
        }
    }
    
    public function getActividadLimpia(){
        if($this->getActividad()){
            $texto= str_replace("<p>","",$this->getActividad());
            return str_replace("</p>", "", $texto);
        }else{
            return "";
        }
    }
}

<?php

/**
 * BaseConceptos
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $concepto
 * @property Doctrine_Collection $CotizacionesConceptos
 * @property Doctrine_Collection $DetallesCotizacionConceptos
 * 
 * @method string              getConcepto()                    Returns the current record's "concepto" value
 * @method Doctrine_Collection getCotizacionesConceptos()       Returns the current record's "CotizacionesConceptos" collection
 * @method Doctrine_Collection getDetallesCotizacionConceptos() Returns the current record's "DetallesCotizacionConceptos" collection
 * @method Conceptos           setConcepto()                    Sets the current record's "concepto" value
 * @method Conceptos           setCotizacionesConceptos()       Sets the current record's "CotizacionesConceptos" collection
 * @method Conceptos           setDetallesCotizacionConceptos() Sets the current record's "DetallesCotizacionConceptos" collection
 * 
 * @package    sfJerryMlAdmin
 * @subpackage model
 * @author     Ricardo Alcantara Gomez <richpolis@gmail.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseConceptos extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('conceptos');
        $this->hasColumn('concepto', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('CotizacionesConceptos', array(
             'local' => 'id',
             'foreign' => 'concepto_id'));

        $this->hasMany('DetallesCotizacionConceptos', array(
             'local' => 'id',
             'foreign' => 'concepto_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $sluggable0 = new Doctrine_Template_Sluggable(array(
             'fields' => 
             array(
              0 => 'concepto',
             ),
             'unique' => true,
             'canUpdate' => true,
             ));
        $this->actAs($timestampable0);
        $this->actAs($sluggable0);
    }
}
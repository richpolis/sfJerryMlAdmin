<?php

/**
 * TalentosTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class TalentosTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object TalentosTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Talentos');
    }
    public function getCriteriaOrdenada(){
        $q=Doctrine_Query::create()
           ->from('Talentos tal')
           ->orderBy('tal.name');
        return $q;
    }
    public function getCriteriaOrdenadaPorActualizacion(){
        $q=Doctrine_Query::create()
                ->from('Talentos tal')
                ->orderBy('tal.updated_at DESC');
        return $q;
    }
    public function getCriteriaUltimosTalentos(){
        $q=$this->getCriteriaOrdenadaPorActualizacion();
        $rootAlias = $q->getRootAlias();
        $q->leftJoin($rootAlias . '.Eventos e');
        return $q;
    }
        
    public function getTalentosPorArreglo($arreglo){
        $q=$this->getCriteriaOrdenada();
        $rootAlias = $q->getRootAlias();
        $q->andWhereIn($rootAlias.'.id', $arreglo);
        //$q->whereIn($rootAlias . '.id', $arreglo);
        $q->leftJoin($rootAlias . '.Eventos e');
        return $q->execute();
    }
    public function getTalentos($arreglo){
        $arregloTalentos=array();
        $q=$this->getCriteriaOrdenada();
        $rootAlias = $q->getRootAlias();
        $q->leftJoin($rootAlias . '.Eventos e');
        $talentos= $q->execute();
        foreach($talentos as $talento){
            if(in_array($talento->getId(),$arreglo)){
                $arregloTalentos[]=$talento;
            }
        }
        return $arregloTalentos;
    }
    
    public function getBackstageConGaleriaPorFecha($fecha_inicial,$fecha_final){
        $q=$this->getCriteriaOrdenada();
        $q->addWhere('tal.updated_at BETWEEN ? to ?',array($fecha_inicial,$fecha_final));
        $rootAlias = $q->getRootAlias();
        $q->leftJoin($rootAlias . '.Eventos e');
        return $q->execute();
    }
    
    
    public function addCriteriaTalentosActivos($q){
        $q->addWhere('tal.is_active=?',true);
        return $q;
    }
    
    public function getMaximo(){
        $q=$this->getCriteriaOrdenada();
        $cmd=$q->execute();
        return $cmd->count()+1;
    }
    
    public function retrieveBackendTalentosList(Doctrine_Query $q)
    {
        $q=$this->getCriteriaOrdenada();   
        $rootAlias = $q->getRootAlias();
        $user=  sfContext::getInstance()->getUser();
        if($user->getSeleccionarTalentos() && $user->getCotizacion()>0){
            $result = array_merge($user->getTalentosCotizacion(), $user->getTalentos());
            $q->whereNotIn($rootAlias.'.id', $result);
        }elseif($user->getSeleccionarTalentos() && $user->getPrecotizacion()>0){
            $result = array_merge($user->getTalentosPrecotizacion(), $user->getTalentos());
            $q->whereNotIn($rootAlias.'.id', $result);
        }elseif($user->getSeleccionarTalentos() && count($user->getTalentos())){
            $q->whereNotIn($rootAlias.'.id', $user->getTalentos());
        }
        
        $q->leftJoin($rootAlias . '.Eventos e');
        return $q;
    }
    
    public function getSqlQuery($query){
        $q = Doctrine_Query::create()
             ->from('Talentos tal')   
             ->where('tal.name like ?', $query)
             //->orWhere('i.titulo like ?',$query)
             ->limit(20);
        $q = Doctrine_Core::getTable('Talentos')->addCriteriaTalentosActivos($q);

        return $q->execute();
    }
    
    public function getHistorialPagosTalentos(array $valores){
        $q=$this->getCriteriaOrdenada();
        $rootAlias = $q->getRootAlias();
        $desde=$valores['desde']['year']."-".$valores['desde']['month']."-".$valores['desde']['day'];
        $hasta=$valores['hasta']['year']."-".$valores['hasta']['month']."-".$valores['hasta']['day'];
        $q->leftJoin($rootAlias . '.PagosTalentos pt');
        $q->leftJoin('pt.DetallesPagosTalentos dpt');
        $q->addWhere('dpt.fecha_pago BETWEEN ? to ?',array($desde,$hasta));
        $q->addWhere('dpt.status=?',$valores['status']);
        $q->addOrderBy('dpt.fecha_pago asc');
        
        if($valores['talento']>0){
            $q->addWhere($rootAlias . '.id=?',$valores['talento']);
        }
        
        return $q->execute();
    }
}